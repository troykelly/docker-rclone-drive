#!/usr/bin/env sh
# set -e

RCLONE=$(command -v rclone)

if [ -z "${GENERATE_CONFIG}" ]; then
  GENERATE_CONFIG="/usr/sbin/generate-config"
fi

if [ -z "${RCLONE_CONFIG}" ]; then
  RCLONE_CONFIG="${HOME}/.config/rclone/rclone.conf"
fi

if [ -z "${RCLONE_PRIMARY_STORE}" ]; then
  RCLONE_PRIMARY_STORE=gdrive
fi

if [ -z "${RCLONE_CRYPT_STORE}" ]; then
  RCLONE_CRYPT_STORE=${RCLONE_PRIMARY_STORE}-crypt
fi

if [ -z "${DRIVE_TARGETFOLDER}" ]; then
  DRIVE_TARGETFOLDER=
fi

if [ -z "${RCLONE_PID_FILE}" ]; then
  RCLONE_PID_FILE=/tmp/rclone.pid
fi

if [ -z "${RCLONE_LOG_LEVEL}" ]; then
  RCLONE_LOG_LEVEL=ERROR
fi

if [ -z "${FORCE_NO_CRYPT}" ]; then
  FORCE_NO_CRYPT=false
fi

if [ -z "${RCLONE_PID_DIR}" ]; then
  RCLONE_PID_DIR=$(dirname "${RCLONE_PID_FILE}")
fi

# https://rclone.org/docs/#bwlimit-bandwidth-spec
if [ -z "${BANDWIDTH_INGRESS}" ]; then
  BANDWIDTH_INGRESS=off
fi

if [ -z "${BANDWIDTH_EGRESS}" ]; then
  BANDWIDTH_EGRESS=off
fi

if [ -n "${USER_EMAIL}" ]; then
  DRIVE_IMPERSONATE="--drive-impersonate ${USER_EMAIL}"
else
  DRIVE_IMPERSONATE=
fi

if [[ ! -x "$GENERATE_CONFIG" ]]
then
  echo "Unable to generate configuration. ${GENERATE_CONFIG} is not executable."
  exit 3
fi

# Generate configuration files
if ! "${GENERATE_CONFIG}"; then
  echo "Failed to generate configuration file."
  exit 4
fi

if [ "$FORCE_NO_CRYPT" == "true" ]; then
  RCLONE_MOUNT_POINT=${RCLONE_PRIMARY_STORE}
else
  RCLONE_MOUNT_POINT=${RCLONE_CRYPT_STORE}
fi

mkdir -p "${RCLONE_PID_DIR}"

if [ -f "${RCLONE_PID_FILE}" ]; then
  RCLONE_PID=$(<"$RCLONE_PID_FILE")
  if ps -p "${RCLONE_PID}" > /dev/null
  then
    echo "RClone is running as PID ${RCLONE_PID}"
    exit 1
  fi
  rm ${RCLONE_PID_FILE}
fi

_term() { 
  echo "ðŸ‘‹ Shutting down..."
  KEEP_RUNNING=false
  if [ -n "${CHILD_RCLONE}" ]; then
    kill -TERM "$CHILD_RCLONE" 2>/dev/null
  fi
  if [ -n "${CHILD_SLEEP}" ]; then
    echo "Exiting sleep"
    kill -TERM "$CHILD_SLEEP" 2>/dev/null
  fi
}

if [ ! -d "/upload" ]; then
  echo "ðŸ˜© There is no /upload. Nothing to do."
  echo "  Sleeping for 10 seconds."
  sleep 10
  exit 0
fi

echo "ðŸ”Œ Pusing to ${RCLONE_MOUNT_POINT}:${DRIVE_TARGETFOLDER} in 30 seconds (wait for mounts)"
sleep 30

trap _term SIGTERM

KEEP_RUNNING=true
RCLONECMD="${RCLONE} ${DRIVE_IMPERSONATE} --bwlimit ${BANDWIDTH_EGRESS}:${BANDWIDTH_INGRESS} move --config ${RCLONE_CONFIG} --delete-after --stats 60s /upload ${RCLONE_MOUNT_POINT}:${DRIVE_TARGETFOLDER} --log-level ${RCLONE_LOG_LEVEL}"
while :
do
  # shellcheck disable=SC2086
  nice -n 20 $RCLONECMD &
  CHILD_RCLONE=$!
  echo "${CHILD_RCLONE}" > ${RCLONE_PID_FILE}
  echo "ðŸ’ª Moving."
  wait "$CHILD_RCLONE"
  echo "ðŸ˜´ Sleeping."
  if [ "$KEEP_RUNNING" != "true" ]; then
    rm ${RCLONE_PID_FILE}
    exit 0
  fi  
  sleep 1800 &
  CHILD_SLEEP=$!
  echo "${CHILD_SLEEP}" > ${RCLONE_PID_FILE}
  wait "$CHILD_SLEEP"
  if [ "$KEEP_RUNNING" != "true" ]; then
    rm ${RCLONE_PID_FILE}
    exit 0
  fi
done
